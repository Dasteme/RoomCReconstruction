
// Code in wallextender.cpp
constexpr double wall_top_dist = 0.75;
constexpr double wall_bot_dist = 2.0;


// In main function "extendWallpoint":
// Note: Code is commented out.

      // * * * * * * * * * * * *
      // Cluster-Classification
      // * * * * * * * * * * * *
/*
      double floorLevel = std::numeric_limits<double>::max();
      double ceilingLevel = std::numeric_limits<double>::lowest();
      int idxFloorCluster = -1;
      int idxCeilingCluster = -1;



      // Find floor-cluster and roof cluster
      for (int i = 0; i < clusters.size(); i++) {

        Eigen::Vector3d floorNormalAssumption{0, 0, 1};
        double angle = safe_acos(clusters[i].normal.dot(floorNormalAssumption) / (clusters[i].normal.norm() * floorNormalAssumption.norm()));
        double gaussian_angle = gaussian_1d(angle, 1.0, 0.0, std::numbers::pi_v<double> / 8);
        if (gaussian_angle > 0.5) {
          if (clusters[i].center[2] < floorLevel) {
            idxFloorCluster = i;
            floorLevel = clusters[i].center[2];
          }
          if (clusters[i].center[2] > ceilingLevel) {
            idxCeilingCluster = i;
            ceilingLevel = clusters[i].center[2];
          }
        }
      }

      std::vector<Walledge> floorEdges;


//      if (idxFloorCluster != -1) {
//        for (int k = 0; k < clusters[idxFloorCluster].points.size(); k++) {
//          colors[clusters[idxFloorCluster].points[k]] = colorRed;
//        }
//      }
//      if (idxCeilingCluster != -1) {
//        for (int k = 0; k < clusters[idxCeilingCluster].points.size(); k++) {
//          colors[clusters[idxCeilingCluster].points[k]] = colorBlue;
//        }
//      }

      int debugCounter = 10;

      //Search wall clusters
      std::vector<int> wallClusters;
      for (int i = 0; i < clusters.size(); i++) {
        if ((abs(clusters[i].normal[2]) < 0.05) && checkWallBotTop(clusters[i].pointsReal, floorLevel, ceilingLevel)) {


          wallClusters.push_back(i);

          //if (debugCounter-- <= 0) {
//            for (int k = 0; k < clusters[i].points.size(); k++) {
//              colors[clusters[i].points[k]] = colorGreen;
//            }


          Eigen::Vector2d perpVec = Eigen::Vector2d(clusters[i].normal[0], clusters[i].normal[1]);
          Eigen::Rotation2D<double> rotationMatrix(0.5*std::numbers::pi_v<double>);
          Eigen::Vector2d linevec = rotationMatrix * perpVec;

          Walledge edge = calculateWallBoundaries(linevec, clusters[i].pointsReal);
          Eigen::Vector2d wallLine = edge.p2 - edge.p1;

          constexpr size_t partSize = 1;

          const size_t t = ceil(wallLine.norm() / partSize);
          std::cout << "t is: " << t << "\n";
          std::vector<std::vector<Eigen::Vector3d>> walllineParts(t);

          for (Eigen::Vector3d p : clusters[i].pointsReal) {
            Eigen::Vector2d p_2d = Eigen::Vector2d{p[0], p[1]};
            double dist = (p_2d - edge.p1).norm();
            double location = (int) floor(dist / partSize);
            if (location >= t) {location = t-1;}    // May happen in extreme cases
            walllineParts[location].push_back(p);
          }



          std::vector<Eigen::Vector3d> edgeIteratorPoints;
          for (int k = 0; k < t; k++) {
            if (walllineParts[k].size() > 0) {
              edgeIteratorPoints.insert(edgeIteratorPoints.end(), walllineParts[k].begin(), walllineParts[k].end());
            } else {
              if (checkWallBotTop(edgeIteratorPoints, floorLevel, ceilingLevel)) {
                Walledge partEdge = calculateWallBoundaries(linevec, edgeIteratorPoints);
                floorEdges.push_back(partEdge);
              }

              edgeIteratorPoints.clear();
            }
            std::cout << (walllineParts[k].size() > 0 ? "#":"_");
          }
          if (edgeIteratorPoints.size() > 0) {
            if (checkWallBotTop(edgeIteratorPoints, floorLevel, ceilingLevel)) {
              Walledge partEdge = calculateWallBoundaries(linevec, edgeIteratorPoints);
              floorEdges.push_back(partEdge);
            }

            edgeIteratorPoints.clear();
          }


          std::cout << "\n\n";





          //floorEdgesPoints.push_back(edge[0]);
          //floorEdgesPoints.push_back(edge[1]);

          //}

        }




      }



      std::cout << "Now starting to combine walls ... \n";

      Wallcombiner myCombiner(floorEdges.size());

      std::cout << "Creating wall-intersections - ";
      std::vector<WalledgeIntersection> wallIntersections;
      for (int i = 0; i < floorEdges.size(); i++) {
        for (int j = i+1; j < floorEdges.size(); j++) {
          //std::cout << "Creating Wall-Intersection - " << i << "," << j << "\n";

          WalledgeIntersection wi = WalledgeIntersection(floorEdges[i], floorEdges[j]);
          if (!wi.hasIntersection) { continue; }
          wallIntersections.push_back(wi);

          //std::cout << "finished\n";

          //std::cout << i << "," << j << ": Pushing back intersectionInfo to wall\n";
          //std::cout << wi << "\n";

          // There is a major problem here... It works for ~100 iterations, then the loop stops.
          // Very interestingly, the loop doesn't even stop here most of the time.
          // The computer slows down after a couples of iterations, and 3-4 seconds later the exit code -1073740791 (0xC0000409) appears.
          // I didn't find a solution, but I think that there is a memory leak somewhere.
          //
          //floorEdges[i].addIntersectionInfo(wi, wi.wall1loc);
          //floorEdges[j].addIntersectionInfo(wi, wi.wall2loc);
          //std::cout << "pushed!" << "\n\n";
        }
      }
      std::cout << " finished\n";







      std::cout << "Preparing combination - ";
      if (floorEdges.size() > 2) {

      // Start with the biggest wall
      Walledge currentWall = floorEdges[0];
      for (Walledge we : floorEdges) {
        if ((we.p1 - we.p2).norm() > (currentWall.p1 - currentWall.p2).norm()) {
          currentWall = we;
        }
      }
      Walledge startingWall = currentWall;


      Walledge nextWallProposal = currentWall;  // Just something s.t. it works
      int currentComingFrom = 0;
      int nextComingFrom = 0;
      intersectionLocation currentSearchingDir = first;
      intersectionLocation nextSearchingDir = first;
      std::vector<Eigen::Vector2d> takenIntersectionPoints;
      std::cout << " finished\n";

      std::cout << "Iterating over walls - ";
      int maxIterations = 200;
      while(true) {
        maxIterations--;
        std::cout << "CurrentWall: " << "["<< currentWall.p1[0] << "," << currentWall.p1[1]  << " and " << currentWall.p2[0] << "," << currentWall.p2[1] << "]\n";

        WalledgeIntersection* currentBestWi = NULL;
        for (WalledgeIntersection& wi : wallIntersections) {
          if (!wi.containsWall(currentWall)) continue;
          if (wi.getWallLocation(currentWall) != currentSearchingDir) continue;
          if (wi.getOppositeWallLocation(currentWall) == middle) continue;
          if (!currentBestWi || wi.interpolatedDistance() < currentBestWi->interpolatedDistance()) {
            currentBestWi = &wi;
          }
        }

        if (!currentBestWi) break;

        takenIntersectionPoints.push_back(currentBestWi->intersectionPoint);
        currentSearchingDir = currentBestWi->getOppositeWallLocation(currentWall) == first ? second:first;
        currentWall = currentBestWi->getOppositeWall(currentWall);

        if (startingWall.compare(currentWall)) break;
        if (maxIterations <= 0) break;
      };




      std::vector<Eigen::Vector2d> floorEdgesPoints;
      for (Walledge e : floorEdges) {
        floorEdgesPoints.push_back(e.p1);
        floorEdgesPoints.push_back(e.p2);
      }

      std::vector<Eigen::Vector2d> floorIntersectionPoints;
      for (WalledgeIntersection wi : wallIntersections) {
        if (wi.hasIntersection) {
          floorIntersectionPoints.push_back(wi.intersectionPoint);
        }

      }

      std::vector<Eigen::Vector2d> takenEdges;

      for (int i = 0; i < takenIntersectionPoints.size(); i++) {
        takenEdges.push_back(takenIntersectionPoints[i]);
        takenEdges.push_back(takenIntersectionPoints[(i+1 >= takenIntersectionPoints.size()) ? 0:(i+1)]);
      }
      //takenEdges.push_back(takenIntersectionPoints[takenIntersectionPoints.size()]);
      //takenEdges.push_back(takenIntersectionPoints[0]);

      writePoints("A_AllFloorIntersections.ply", simple2Dto3D(floorIntersectionPoints));
      writeEdges("A_AllFloorEdges.ply", simple2Dto3D(floorEdgesPoints));
      writeEdges("A_InterpolatedFloorEdges.ply", simple2Dto3D(takenEdges));


      std::vector<Eigen::Vector3d> vertices;
      std::vector<std::uint32_t> faces;
      polygon2dToRoom(takenIntersectionPoints, floorLevel, ceilingLevel, vertices, faces);
      writePointsWithFaces("A_Room.ply", vertices, faces);

      }
      std::cout << " finished\n";



      std::cout << "ClusterIndex: " << idxFloorCluster;











      Eigen::Matrix<double, 3, Eigen::Dynamic> intersectPoints(3, 0);
*/



      /*for (int i : {idxFloorCluster, idxCeilingCluster}) {

        std::vector<int> checkedWalls;
        checkedWalls.push_back(wallClusters[0]);     // Last element of this vector is current processed wall

        while (checkedWalls.size() < wallClusters.size()) {

          int idxCurrentWall = checkedWalls[checkedWalls.size()-1];
          int idxClosestIntersection = -1;
          double minDistance = 1000; //std::numeric_limits<double>::max();
          Eigen::Vector3d pointClosestIntersection;

          double cdc1Dbg;
          double cdc2Dbg;
          double cdc3Dbg;

          for (int k : wallClusters) {
            // If wall was already checked, continue;
            if ((std::find(checkedWalls.begin() + 1, checkedWalls.end(), k) != checkedWalls.end())) { continue; }

            Eigen::Vector3d resultpoint;
            if (RoomCReconstruction::intersect3Clusters(
              clusters[i], clusters[idxCurrentWall], clusters[k], resultpoint)) {

              double cdc1 = clusters[i].calculateClosestDistanceToCluster(resultpoint);
              double cdc2 = clusters[idxCurrentWall].calculateClosestDistanceToCluster(resultpoint);
              double cdc3 = clusters[k].calculateClosestDistanceToCluster(resultpoint);

              if (cdc2 < minDistance) {
                minDistance = cdc2;
                idxClosestIntersection = k;
                pointClosestIntersection = Eigen::Vector3d{resultpoint[0], resultpoint[1], resultpoint[2]};

                cdc1Dbg = cdc1;
                cdc2Dbg = cdc2;
                cdc3Dbg = cdc3;
              }

            }
          }

          if (idxClosestIntersection == -1) { std::cout << "ERROR: We did not find a suitable intersection :(:(:(:("; break;}

          clusters[i].intersectionsPoints.push_back(pointClosestIntersection);
          clusters[idxCurrentWall].intersectionsPoints.push_back(pointClosestIntersection);
          clusters[idxClosestIntersection].intersectionsPoints.push_back(pointClosestIntersection);


          std::cout << "Clostest distances: " << cdc1Dbg << ", " << cdc2Dbg << ", " << cdc3Dbg;
          std::cout << "found intersection between: " << i << "," << idxCurrentWall << "," << idxClosestIntersection << ", " << "point: ";
          printMyVec(pointClosestIntersection);
          std::cout << "\n";

          intersectPoints.conservativeResize(intersectPoints.rows(), intersectPoints.cols()+1);
          intersectPoints.col(intersectPoints.cols()-1) = pointClosestIntersection;
          colors.push_back(colorRed);

          checkedWalls.push_back(idxClosestIntersection);
        }

      }


      // For every cluster that has at least 4 intersection-points, take the first 4 intersection-points and create a plane
      std::vector< std::vector <Eigen::Vector3d>> realpoints;
      for (int i = 0; i < clusters.size(); i++) {
          if (clusters[i].intersectionsPoints.size() < 4) continue;
        realpoints.emplace_back(clusters[i].intersectionsPoints);
      }

      RoomCReconstruction::createPlanarRoom("interpolation_method.ply", realpoints);*/


      /*Eigen::Matrix<double, 3, Eigen::Dynamic> printMat(points.rows(), points.cols() + intersectPoints.cols());
      printMat << points, intersectPoints;
      TangentSpace::IO::write3DPointsWithColors("output_clustering_Andintersections.ply", printMat, colors);
*/







// Gets the 2 "corners"/"points defining the 2d-wall" for a given wall.
Walledge calculateWallBoundaries(const Eigen::Vector2d& linevec, const std::vector<Eigen::Vector3d>& points) {

      int comparisonInt = abs(linevec[0]) > abs(linevec[1]) ? 0:1;

      double maxX = std::numeric_limits<double>::lowest();
      //double maxY = std::numeric_limits<double>::lowest();
      double minX = std::numeric_limits<double>::max();
      //double minY = std::numeric_limits<double>::max();

      Eigen::Vector3d leftmost_point;
      Eigen::Vector3d rightmost_point;

      for (const Eigen::Vector3d& p : points) {
        if (p[comparisonInt] > maxX) { maxX = p[comparisonInt]; rightmost_point = p; }
        if (p[comparisonInt] < minX) { minX = p[comparisonInt]; leftmost_point = p; }
        //if (p[1] > maxY) { maxY = p[1]; }
        //if (p[1] < minY) { minY = p[1]; }
      }



      //std::cout << "X: [" << maxX << ", " << maxY << "], Y: [" << minX << ", " << minY << "]";

      return Walledge{Eigen::Vector2d{leftmost_point[0], leftmost_point[1]}, Eigen::Vector2d{rightmost_point[0], rightmost_point[1]}};
    }


// Checks if wall reaches from bot to top
bool checkWallBotTop(const std::vector<Eigen::Vector3d>& points, double floorLevel, double ceilingLevel) {
      double max_top = std::numeric_limits<double>::lowest();
      double max_bot = std::numeric_limits<double>::max();

      for (const Eigen::Vector3d& p : points) {
        if (p[2] > max_top) max_top = p[2];
        if (p[2] < max_bot) max_bot = p[2];
      }

      return abs(ceilingLevel - max_top) < wall_top_dist && abs(floorLevel - max_bot) < wall_bot_dist;
    }






















// Code in wallextender.hpp
    enum intersectionLocation {middle, first, second};    // middle: on the line, fist: closer to first point


    class WalledgeIntersection;

    class Intersection {
    public:
      Eigen::Vector2d intersectionPoint;

    };

    class Walledge {
    public:
      Eigen::Vector2d p1;
      Eigen::Vector2d p2;

      std::vector<WalledgeIntersection> p1dirIntersections;
      std::vector<WalledgeIntersection> middleIntersections;
      std::vector<WalledgeIntersection> p2dirIntersections;


      Walledge(Eigen::Vector2d p1_p, Eigen::Vector2d p2_p) : p1(p1_p),p2(p2_p) {

      };


      void addIntersectionInfo(WalledgeIntersection& wi, intersectionLocation location) {
        if (location == first) { p1dirIntersections.push_back(wi); }
        else if (location == middle) { middleIntersections.push_back(wi); }
        else { p2dirIntersections.push_back(wi); }
      }

      std::vector<WalledgeIntersection> getDirectionalIntersections(intersectionLocation location) {
        if (location == first) { return p1dirIntersections; }
        else if (location == middle) { return middleIntersections; }
        else { return p2dirIntersections; }
      }

      // Returns true if the walls are the same
      bool compare(Walledge toWall) {
        return p1 == toWall.p1 && p2 == toWall.p2;
      }
    };





    class WalledgeIntersection {
    public:
      Walledge wall1;
      Walledge wall2;
      Eigen::Vector2d intersectionPoint;

      bool hasIntersection = false;


      // Further information used for combining walls
      intersectionLocation wall1loc;
      intersectionLocation wall2loc;
      size_t distWall1;
      size_t distWall2;


      WalledgeIntersection(Walledge e1_p, Walledge e2_p) : wall1(e1_p), wall2(e2_p) {
        // Calculate intersection
        // 1. Break condition: Lines do not intersect. Return and keep hasIntersection==false;
        if (!intersect2dLines(wall1, wall2, intersectionPoint)) { return; }

        double dist_w1p1 = (wall1.p1 - intersectionPoint).norm();
        double dist_w1p2 = (wall1.p2 - intersectionPoint).norm();
        double dist_w2p1 = (wall2.p1 - intersectionPoint).norm();
        double dist_w2p2 = (wall2.p2 - intersectionPoint).norm();

        double dist_w1 = std::min(dist_w1p1, dist_w1p2);
        double dist_w2 = std::min(dist_w2p1, dist_w2p2);

        // 2. Break condition: We can specify a maximum interpolation distance to improve speed and accurracy.
        if (!(dist_w1 < 100 && dist_w2 < 100)) { return; }

        // From now on, intersection is ok and calculate some attributes.
        hasIntersection = true;

        double len_w1 = (wall1.p2 - wall1.p1).norm();
        double len_w2 = (wall2.p2 - wall2.p1).norm();

        // Point lies on the wall iff the distance from intersection->p1 and intersection->p2
        // are smaller than the length of the wall.
        wall1loc = (dist_w1p1 <= len_w1 && dist_w1p2 <= len_w1) ? middle:((dist_w1p1 < dist_w1p2) ? first:second);
        wall2loc = (dist_w2p1 <= len_w2 && dist_w2p2 <= len_w2) ? middle:((dist_w2p1 < dist_w2p2) ? first:second);

        // If intersectionpoint lies on wall1, it also must lie on wall2
        assert((wall1loc == middle && wall2loc == middle) || (wall1loc != middle && wall2loc != middle));


        distWall1 = (wall1loc == middle) ? 0:(wall1loc == first) ? dist_w1p1:dist_w1p2;
        distWall2 = (wall2loc == middle) ? 0:(wall2loc == first) ? dist_w2p1:dist_w2p2;

        //std::cout << "Intersction at: " << intersectionPoint << "\n";
      }

      friend std::ostream& operator<<(std::ostream& os, WalledgeIntersection const & wei) {
        return os << "["<< wei.wall1.p1[0] << "," << wei.wall1.p1[1]  << " and " << wei.wall1.p2[0] << "," << wei.wall1.p2[1] << "]" <<
          "["<< wei.wall2.p1[0] << "," << wei.wall2.p1[1]  << " and " << wei.wall2.p2[0] << "," << wei.wall2.p2[1] << "]" <<
          " with: " << "w1:" << "[" << wei.wall1loc << ":" << wei.distWall1 << "]" << ", w2: " << "[" << wei.wall2loc << ":" << wei.distWall2 << "]";
      }

      bool intersect2dLines(Walledge e1, Walledge e2, Eigen::Vector2d& intersectionPoint) {
        Eigen::Vector2d A = e1.p1;
        Eigen::Vector2d B = e1.p2;
        Eigen::Vector2d C = e2.p1;
        Eigen::Vector2d D = e2.p2;

        // Line from e1 (AB) represented as a1x + b1y = c1
        double a1 = B[1] - A[1];
        double b1 = A[0] - B[0];
        double c1 = a1*(A[0]) + b1*(A[1]);

        // Line from e2 (CD) represented as a2x + b2y = c2
        double a2 = D[1] - C[1];
        double b2 = C[0] - D[0];
        double c2 = a2*(C[0]) + b2*(C[1]);

        double determinant = a1*b2 - a2*b1;

        if (abs(determinant) < DBL_EPSILON) {
          return false;
        } else {
          double x = (b2*c1 - b1*c2) / determinant;
          double y = (a1*c2 - a2*c1) / determinant;
          intersectionPoint = Eigen::Vector2d{x,y};
          return true;
        }
      }

      double interpolatedDistance() {
        return distWall1 + distWall2;
      }

      /*
       * Checks whether this intersection intersects walledge.
       * The walledge
       */
      bool containsWall(Walledge wall) {
        return wall1.compare(wall) || wall2.compare(wall);
      }


      intersectionLocation getWallLocation(Walledge wall) {
        if (wall1.compare(wall)) return wall1loc;
        if (wall2.compare(wall)) return wall2loc;
        throw std::invalid_argument("received wrong wall");
      }

      Walledge getOppositeWall(Walledge wall) {
        if (wall1.compare(wall)) return wall2;
        if (wall2.compare(wall)) return wall1;
        throw std::invalid_argument("received wrong wall");
      }

      intersectionLocation getOppositeWallLocation(Walledge wall) {
        if (wall1.compare(wall)) return wall2loc;
        if (wall2.compare(wall)) return wall1loc;
        throw std::invalid_argument("received wrong wall");
      }

    };


    class WalledgeWithIntersections;

    class XX {
    public:
      size_t interpolationDistace;
      Eigen::Vector2d intersectionPoint;
      WalledgeWithIntersections* otherWall;
    };


    class WalledgeWithIntersections {
    public:
      Walledge wall;
      std::vector<XX*> middleIntersections;
      std::vector<XX*> firstIntersections;
      std::vector<XX*> secondIntersections;
    };

    class YY {
    public:
      Walledge walledge;


    };


    class Wallcombiner {
    public:
      std::vector<XX> combis;

      Wallcombiner(size_t numberOfWalls) : combis(numberOfWalls) {


      }

      void addWalledgeIntersection(WalledgeIntersection wei) {

      }


    };


Walledge calculateWallBoundaries(const Eigen::Vector2d& linevec, const std::vector<Eigen::Vector3d>& points);
bool checkWallBotTop(const std::vector<Eigen::Vector3d>& points, double floorLevel, double ceilingLevel);