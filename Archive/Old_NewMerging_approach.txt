This merging-approach tried to merge clusters using the new "keypoints" of a cluster.
The idea is that every cluster has a certain extend of the plane.
Clusters which are fully within this extend should basically belong to the cluster and get absorbed.

With this approach, it wouldn't be necessary to compare normals, so the difference between merging and absorbing
wouldn't be necessary anymore.

It did not work out because the normals were too inaccurate and there were multiple problems that needed a fix.
For example, a maximum distance away from the plane for the points would have been necessary, because during merging,
it was possible to slowly increase the cluster-extend for a cluster.
In the end, it would have been more complicated and possibly had even a worse performance than the current merging-approach.


  /*void mergingNew(Cluster& toMergeCluster,
  double dist,
  double reqPercent,
  double requireCloseness)
  {
    if (requireCloseness >= 0 && distanceToOtherCluster(toMergeCluster) > requireCloseness) {return;}
    double unnec_dist_p = -1;

    int possibleMergePoints = 0;
    for (int i = 0; i < toMergeCluster.markerPoints.size(); i++) {
      if (isWithinPlaneExtension(toMergeCluster.markerPoints[i], 0.05)) {possibleMergePoints++;}
    }

    if (possibleMergePoints / toMergeCluster.markerPoints.size() >= reqPercent) {

      for (int i = 0; i < toMergeCluster.points.size(); i++) {

        if (checkAdd(
          toMergeCluster.center, toMergeCluster.normal, 0.05, 16, unnec_dist_p)) {
          // Todo: Consider adding without normal
          Add(toMergeCluster.pointsReal[i],
              toMergeCluster.pointsNormals[i],
              toMergeCluster.points[i]);
        } else if (checkAdd(toMergeCluster.center,
                            -toMergeCluster.normal, 0.05, 16,
                            unnec_dist_p)) {
          // Todo: Consider adding without normal
          Add(toMergeCluster.pointsReal[i],
              -toMergeCluster.pointsNormals[i],
              toMergeCluster.points[i]);
        }// else {
        //  addNoNormal(toMergeCluster.pointsReal[i], toMergeCluster.points[i]);
        //}

      }
      markerPoints.insert(markerPoints.end(),
                          toMergeCluster.markerPoints.begin(),
                          toMergeCluster.markerPoints.end());
      toMergeCluster.mergedCluster = true;
      calculatePlaneExtension();
    }
  }*/





// A later approach that only modified the "absorbing".
// Did also not work very well


/*
if (reqPercent == 0) {
  // current code, merging...
} else {

}
      int possibleMergePoints = 0;
      for (int i = 0; i < toMergeCluster.pointsReal.size(); i++) {
        if (isWithinPlaneExtension(toMergeCluster.pointsReal[i], 0.1)) {possibleMergePoints++;}
      }

      if (possibleMergePoints / toMergeCluster.pointsReal.size() >= reqPercent) {

        for (int i = 0; i < toMergeCluster.points.size(); i++) {

          Add(toMergeCluster.pointsReal[i],
              toMergeCluster.normal,
              toMergeCluster.points[i]);

        }
        markerPoints.insert(markerPoints.end(),
                            toMergeCluster.markerPoints.begin(),
                            toMergeCluster.markerPoints.end());
        toMergeCluster.mergedCluster = true;
        calculatePlaneExtension();
      }

    }*/









// These are two attributes and two methods used for the "new merging"-approach

  //double negativeExtend = 0;
  //double maximumExtend = 0;

  /*void calculatePlaneExtension() {
    negativeExtend = 0;
    maximumExtend = 0;
    for (Eigen::Vector3d& pr : pointsReal) {
      double distance = (pr - center).dot(normal);
      if (distance < negativeExtend) {negativeExtend = distance;}
      if (distance > maximumExtend) {maximumExtend = distance;}
    }
  }

  bool isWithinPlaneExtension(Eigen::Vector3d& p, double maxDist) {
    double distance = (p - center).dot(normal);
    if (distance >= (-maxDist) && distance <= (maxDist)) return true;
    return false;
  }

*/